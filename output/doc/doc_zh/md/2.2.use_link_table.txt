2.2 使用链接表
-------------

&nbsp;

#### root 列表

链接表的 `root` 项指示入口组件列表，列表中各项用绝对路径方式指明哪些构件要创建到根节点（即 `.body` 节点）之下。比如，这么定义链接表：

``` js
{
  "root": [".body.auto0.panelA",".body.auto0.panelB"]
}
```

系统启动后尝试找到 panelA 与 panelB 两个面板（并不限制定义在哪个胶片），将它们安装到 `.body` 节点下。

#### 链接表中次级定义

链接表中 `root` 项是首级定义，也称 "root 入口定义"，当首级构件之下特定的子成员需要组装时，可以通过链接表次级定义实现。

比如 `root` 列表指定 `".body.auto0.panelA"` 面板，该面板的下级有一个工具条，而工具条的细节在另一页胶片中定义。链接表这么定义：

``` js
{
  "root": [".body.auto0.panelA",".body.auto0.panelB"],
  ".body.auto0.panelA": {
    "toolbar": ".body.auto1.tool_bar"
  }
}
```

系统找到 panelA 后，查询链接表，发现它还有次级定义，然后由次级定义的 `"toolbar"` 项，判断出 panelA 下级的一个构件（即 `".body.auto0.panelA.toolbar"`），需被另一页胶片中定义的 `".body.auto1.tool_bar"` 构件替换。经替换组装的 panelA 最后安装到 `".body"` 节点下。

注意：

1. 链接表的次级定义也是一张表，表的索引项要求用 "相对路径" 字串。
2. 被替换构件的 **`props.style`** 会保留，另外 **`props.left, props.top, props.width, props.height`** 这几项取值也会保留。
3. 被替换构件的 key 值，以被替换者为准，即，被替换构件的 key 值也保留了。如上例，替换后工具条的 key 为 `"toolbar"`，而非 `"tool_bar"`。
4. 允许有多层 "次级定义"，比如上例中，`toolbar` 指向 `".body.auto1.tool_bar"`，而这个 `".body.auto1.tool_bar"` 构件还可定义次级表，让该 `tool_bar` 下某几个子构件，再被预设的构件替换。

#### 几点建议

尽管链接表的容量与次级定义引用深度没有限制，我们仍建议尽量让链接表简单些，引用深度浅一些。过于复杂的链接表，会让调测变复杂，对产品维护也不利。

另外，宜在顶层粗粒度界面设计时使用链接引用，链接表的 "次级定义" 宜限定在面板布局（块构件）层次，不宜将行内构件设为次级表。一个页面的上下边栏、左右边栏、主内容区等按大区块划分，通常用 "次级表" 分割，各自独立展开精细化设计。

&nbsp;
