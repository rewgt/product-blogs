1.3 一个简单的例子
------

&nbsp;

以新建一个 MyApp 项目为例，第 1 步，在 PINP blogs 安装目录（即 `<user>/blogs` 目录）的同级位置，创建 `MyApp` 目录（即 `<user>/MyApp`），然后拷贝 `<user>/blogs/lib/` 整个子目录到 `<user>/MyApp/lib`，再拷贝 `<user>/blogs/lib/pinp_app.html` 到 `<user>/MyApp/` 下，并更名为 `index.html`。

这一步是为了重用 blogs 项目的开发环境配置，blogs 用于管理若干篇拼文，我们现在是创建一个全新 Web APP，不管理拼文。

第 2 步，在网页打开 `localhost:3000/`，如下图，点击 `MyApp` 项目右侧的 Edit 按钮。

![Edit MyApp](md/res/edit_app.png)

系统自动打开一个新页用于可视化编辑这个 APP，如下图：

![Open creator](md/res/creator_gui.gif)

现在我们的设计起点与《Shadow Widget 用户手册》介绍的场景对接上了，这个例子在生产环境运行的效果是：显示 `"Hello, world!"` 一条文本。

扼要介绍一下本例的实现原理：

1. 借助胶片页方便拖入、组装各式可视组件的特性，我们设计若干隐藏的胶片页（即，将 ScenePage 的 `props.noShow` 赋值 `"1"`），在这些胶片页里随意实施可视化设计。隐藏的胶片页起到模板的作用，设计时可见，正式运行时不可见。

2. 首个胶片页实现两项定义，其一是**入口界面**（该页的 `body.root` 构件），其二是**链接表**（该页的 `link_table` 构件）。前者用于定义入口样式，后者定义如何组装，PINP 的界面设计是可拆解的，比如，在入口界面摆一个工具条，而工具条的细节设计，可在另一页胶片中展开。

3. 程序正式运行时（非设计态），系统根据上述两项定义自动在根节点（即 `".body"` 节点）组装出主界面。如本例的链接表，由 `root` 项指示入口组件 `".body.auto0.body.root"`，系统自动找到它并安装到根节点之下。

&nbsp;
