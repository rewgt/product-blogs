2.1 写作即编程
-------------

&nbsp;

#### 从两个角度理解 PINP 系统

拼文系统同时具备 “写作” 与 “编程” 的特性，对于前者，可编程的特性收藏起来不用，保证用它写作与使用 WORD 或 PPT 一样简单，但对于后者，涉及到编程总会很复杂，需经职业化的技能培训。

用 PINP 编程，需学习两大编程系统，其一是 React 框架，其二是 Shadow Widget 框架，这两个框架学好了，其它知识都是很容易掌握的，尤其是 Shadow Widget 框架，它的规范化插件机制，让叠加其上各个库的用法很接近，如 shadow-slide、blogs 等，一通百通，学习成本很低。

本库（即 rewgt/blogs 项目，有时也称 PINP 系统或拼文系统），提供如下两方面功能：

1. 拼文管理   
包括创建、编辑、管理博客文档或演示胶片，要求用户撰写的文档保存在本项目的 md 子目录下。

2. 按照 Shadow Widget 的插件与样板要求，扩展出若干构件供编程或写文档时使用   
包括：用 `DrawPaper` 与 `SvgPanel` 构件进行绘图，如流程图、实体关系图、Petri Net 图、思维导图等；集成 `chart.js` 折线图、柱状图、饼图、雷达图等；用来描述文章的标题、简介、缩略图等组件。这些新扩展构件的编程接口在 `lib/blogs.min.js` 文件中定义，至于如何在编程中使用它们，请参考 ["编程接口"](#3.) 一章。

当本库用于拼文写作时，上述两方面功能都用到，如果用于编程，自行开发网页程序时，只用后一项内容。所以，如 ["一个简单例子"](#1.3.) 一节介绍，用于编程时，我们要另建 project 目录，并拷贝 `blogs/lib` 整个目录，因为该 `lib` 目录下的文件，是这两方面功能的公共库。

#### 写作即编程

PINP 开发系统遵循 **"写作即编程"** （Writing is programming）的理念，一方面编程中的界面开发可看成一种写作的过程，就像编写胶片一样简单，通过拖入样板创建界面元素，再配置其属性，界面样式就设计出来了，整个过程 "所见即所得"；另一方面，界面设计与其下层的编码分离，Shadow Widget 系统提供了界面与投影定义及 idSetter 定义动态捆绑的机制，界面设计非常直观易用，而下层编码则独立在 JS 文件编程，与常规前端开发一样，没什么功能限制。

在拼文世界里，“写作” 就是省略代码编写的 “界面设计” 过程。

有关界面元素与底层实现的动态捆绑机制，请参考《Shadow Widget 用户手册》中 "2.2 投影式声明" 及 "3.4 函数式开发"。

#### 可选使用链接表

在 `lib/blogs.min.js` 中，还定义如何使用链接表，将胶片页中预设的若干界面元素，组装出用户操作主界面。但是否启用链接表是可选的，满足如下条件，才启用链接表：

1. 设计一个以上胶片页（即 ScenePage），而且所有胶片页都指定 `props.noShow` 为 `"1"`，即，所有胶片页都是隐藏的，都用作模板。这也意味着 “使用链接表” 与 “使用演示胶片” 天然互斥，选了一个就不能再选另一个。

2. 在首张胶片页设置一个 key 值为 `"link_table"` 的链接表，链接表构件的 `props['html.']` 值要求是 JSON 格式字串。

如果不启用本库的链接表特性，您仍可按常规方式使用 `lib/blogs.min.js` 中新扩展的 `chart.js` 绘图构件，`DrawPaper, SvgPanel` 等构件。

&nbsp;
